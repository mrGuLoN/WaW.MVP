
GPU-based Occlusion culling

This package will improve performance by culling objects that are occluded by other objects in your scene. It uses the GPU slightly more but improves CPU time spent on draw calls.
It also has a lag of 1-3 frames because it disables objects that were not visible 1-3 frames ago.
It only works with platforms supporting compute buffers.
it only works with opaque objects.

How does it work ?

For every object in the level, or for the objects you manually pass in to Occludees, a bounding box is created and rendered in the transparency pass. Based on the number of pixels visible after these invisible bounding boxes are rendered, the original objects of those
bounding boxes have their meshRenderer disabled. The reading of this data is done in an AsyncGPUReadback on platforms that support it. If that's not the case, a slow path of using ComputeBuffer.GetData is used that
may create stalls and take more CPU time than the culled objects.
In order to apply this effect, all you need to do is add the RE_Occlusion component to a camera, add static or dynamic occludes (or let the component decide for the entire scene )
and it should automatically work. If you have dynamic content, just add the component but leave it disable it, then enable it when you want to initialize and remove/add it again
when you change your scene.

RE_Occlusion.cs

Occlusion Mat - this is the material the invisible bounding boxes will use to get rendered
Visible Objects - this tells you how many visible objects are from the total
Total Objects - total objects for which visibility is tested
OccludeesStatic - if you add objects here, then visibility is tested only for these, otherwise, it tries to cull the entire scene ( Objects need to be active in scene at the moment this script's Start() is called )
OccludeesDynamic - add here your dynamic objects. These are objects that are assumed to be updated every frame. Be wary of how many objects you add, or else the updates will take longer than any occlusion benefits

Shader "RE/Occlusion" - this shader is used by the invisible bounding boxes and needs to be the shader for
the "Occlusion Mat"; you do not need to apply this shader to anything in the scene